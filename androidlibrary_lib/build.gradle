import org.gradle.api.attributes.Attribute
import org.gradle.api.attributes.AttributeContainer

/**************************************************************************************************
                                        GRADLE CONFIG
 *************************************************************************************************/

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

libraryScripts.each {
    apply from: it
}

apply plugin: 'com.android.library'
apply plugin: "com.jfrog.artifactory"
apply plugin: "ivy-publish"

group = groupId

android {

    // The following are set in the common.gradle file
    compileSdkVersion(compileVersion)
    buildToolsVersion(buildTools)
    defaultConfig {
        minSdkVersion(minVersion)
        targetSdkVersion(targetVersion)
        versionCode(releaseVersionCode)
        versionName(versionCodeName)
        testInstrumentationRunner(instrumentationRunner)
    }

    // set by command line arguments
    publishNonDefault(gradle.ext.odkPublishConfig.toBoolean())
    defaultPublishConfig(gradle.ext.odkDefaultPublishConfig)

    flavorDimensions "stage", "testing"

    productFlavors {
        demo {
            dimension 'stage'
        }

        master {
            dimension 'stage'
        }

        snapshot {
            dimension 'stage'
        }

        basic {
            dimension 'testing'
        }

        uitest {
            dimension 'testing'
        }
    }

    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            matchingFallbacks = ['debug']
        }
        debug {
            debuggable(true)
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
            matchingFallbacks = ['release']
        }
    }

    packagingOptions { // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
}


configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}


dependencies {
    api fileTree(include: '*.jar', dir: 'libs')
    api 'net.jcip:jcip-annotations:1.0'
    api 'com.android.support:support-annotations:27.0.1'
    api 'com.android.support:support-v13:27.0.1'

    // Testing dependencies
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'

}

//publishing {
//    publications {
//        aar(IvyPublication) {
//            artifact "$buildDir/outputs/aar/snapshotAndroidlibrary-snapshot-basic-debug.aar"
//        }
//    }
//}

project.version = version

publishing {
    publications {
        aar(IvyPublication) {
//            from components.android
            revision version
//            artifact = [
//                source = "$buildDir/outputs/aar/androidlibrary_lib-snapshot-basic-release.aar",
//                builtBy = "assembleSnapshotBasicRelease"
//            ]
            artifact source: "$buildDir/outputs/aar/demoAndroidlibrary-snapshot-basic-release.aar",
                     builtBy: assemble
        }
    }
    repositories {
        ivy {
            ivyPattern('[organization]/[module]/[revision]/[type]s/ivy-[revision].xml')
            artifactPattern('[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]')
        }
    }
}

artifactoryPublish {
    publications(publishing.publications.aar)
}

task update_version {
    doLast {
        publishing.publications.aar.revision version
    }
}

//tasks.whenTaskAdded { task -> if (task.name.endsWith('artifactoryPublish')) {task.dependsOn.mustRunAfter assemble} }

task printInfo {
    doLast {
        println project.version
        println project.components
//        for (Configuration config : getProject().getConfigurations()) {
//            for (ConfigurationVariant cv : config.getOutgoing().getVariants()) {
//                System.out.println("\tConfigurationVariant: " + cv.getName());
//                for (PublishArtifact pa : cv.getArtifacts()) {
//                    System.out.println("\t\tArtifact: " + pa.getFile());
//                    System.out.println("\t\tType:" + pa.getType());
//                }
//            }
//        }
    }
}

//printInfo.dependsOn artifactoryPublish